check_id,path,start_line,end_line,message
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/browscap_convert.php,36,36,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/browscap_convert.php,36,36,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,105,105,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,105,105,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,189,189,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,189,189,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,215,215,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,215,215,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,253,253,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,253,253,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/contentform.php,254,254,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/contentform.php,254,254,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,37,37,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,37,37,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,38,38,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,38,38,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,43,43,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,43,43,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,54,54,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,54,54,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqform.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqform.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,32,32,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,32,32,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,44,44,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,44,44,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,49,49,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,49,49,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,77,77,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,77,77,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqlist.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqlist.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,43,43,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,43,43,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,64,64,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,64,64,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,66,66,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,66,66,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,131,131,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,131,131,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/faqmasterform.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/faqmasterform.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_form.php,36,36,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_form.php,36,36,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_form.php,49,49,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_form.php,49,49,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_form.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_form.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_preview.php,25,25,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_preview.php,25,25,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_preview.php,26,26,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_preview.php,26,26,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_form.php,65,65,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_form.php,65,65,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,86,86,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,86,86,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,116,116,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,116,116,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/mail_select_list.php,129,129,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/mail_select_list.php,129,129,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/member_list_delete.php,33,33,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/member_list_delete.php,33,33,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/menu_form.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/menu_form.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/menu_form.php,116,116,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/menu_form.php,116,116,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/menu_form.php,130,130,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/menu_form.php,130,130,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/menu_form.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/menu_form.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,47,47,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,47,47,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,70,70,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,70,70,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,81,81,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,81,81,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,82,82,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,82,82,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,90,90,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,90,90,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,104,104,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,104,104,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,112,112,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,112,112,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,130,130,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,130,130,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,136,136,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,136,136,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/newwinform.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/newwinform.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,62,62,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,62,62,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,103,103,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,103,103,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,104,104,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,104,104,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/popular_rank.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/popular_rank.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,115,115,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,115,115,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/ajax.orderitem.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,47,47,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,47,47,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,86,86,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,86,86,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,102,102,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,102,102,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,103,103,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,103,103,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,112,112,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,112,112,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,123,123,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,123,123,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerform.php,159,159,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerform.php,159,159,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,50,50,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,50,50,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,57,57,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,57,57,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,64,64,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,64,64,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,65,65,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,65,65,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,70,70,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,70,70,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,152,152,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,152,152,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,154,154,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,154,154,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,155,155,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,155,155,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,160,160,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,160,160,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/bannerlist.php,176,176,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/bannerlist.php,176,176,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,165,165,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,165,165,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,184,184,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,186,186,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,186,186,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,187,187,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,187,187,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,188,188,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,188,188,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,189,189,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,189,189,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,190,190,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,190,190,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,196,196,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,196,196,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,209,209,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,209,209,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,211,211,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,211,211,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,212,212,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,212,212,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,219,219,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,219,219,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,225,225,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,225,225,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,249,249,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,249,249,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,251,251,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,251,251,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,259,259,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,259,259,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,266,266,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,266,266,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,273,273,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,273,273,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,280,280,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,280,280,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,286,286,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,286,286,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,288,288,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,288,288,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,296,296,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,296,296,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,303,303,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,303,303,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,310,310,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,310,310,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,317,317,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,317,317,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,324,324,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,324,324,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,331,331,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,331,331,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,373,373,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,373,373,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,380,380,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,380,380,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,403,403,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,403,403,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,410,410,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,410,410,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,417,417,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,417,417,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,424,424,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,424,424,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,449,449,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,449,449,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,451,451,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,451,451,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,578,578,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,578,578,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/categoryform.php,579,579,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/categoryform.php,579,579,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,50,50,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,50,50,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,77,77,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,77,77,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,78,78,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,78,78,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,86,86,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,86,86,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,103,103,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,103,103,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,126,126,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,126,126,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,136,136,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,136,136,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponform.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponform.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponmember.php,48,48,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponmember.php,48,48,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponmember.php,66,66,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponmember.php,66,66,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponmember.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponmember.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponmember.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponmember.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponmember.php,81,81,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponmember.php,81,81,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,75,75,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,75,75,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/coupontarget.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/coupontarget.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,55,55,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,55,55,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,87,87,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,87,87,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,108,108,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,108,108,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,130,130,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,130,130,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,159,159,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,159,159,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,166,166,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,166,166,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,174,174,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,174,174,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,175,175,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,175,175,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,176,176,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,176,176,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,183,183,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,183,183,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/couponzoneform.php,189,189,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/couponzoneform.php,189,189,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,193,193,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,193,193,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,269,269,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,269,269,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,270,270,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,270,270,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,270,270,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,270,270,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,274,274,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,274,274,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,275,275,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,275,275,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,276,276,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,276,276,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,277,277,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,277,277,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,278,278,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,278,278,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,279,279,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,279,279,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,280,280,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,280,280,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,282,282,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,282,282,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,283,283,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,283,283,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,342,342,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,342,342,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,367,367,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,367,367,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,368,368,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,368,368,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,370,370,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,370,370,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,371,371,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,371,371,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,475,475,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderform.php,475,475,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,479,479,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,483,483,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,488,488,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,489,489,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,490,490,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,491,491,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,496,496,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,516,516,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,520,520,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,524,524,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,529,529,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,530,530,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,531,531,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,532,532,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,539,539,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,539,539,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderform.php,544,544,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/inorderformupdate.php,390,390,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/inorderformupdate.php,390,390,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemcopy.php,24,24,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemcopy.php,24,24,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemcopy.php,24,24,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemcopy.php,24,24,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,126,126,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,126,126,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,139,139,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,139,139,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,152,152,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,152,152,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,165,165,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,165,165,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,172,172,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,172,172,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,180,180,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,180,180,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,181,181,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,181,181,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,188,188,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,188,188,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,213,213,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,213,213,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,252,252,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,252,252,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,253,253,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,253,253,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,288,288,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,288,288,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,313,313,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,313,313,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,322,322,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,322,322,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,328,328,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,328,328,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventform.php,381,381,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventform.php,381,381,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,88,88,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,88,88,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,138,138,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,138,138,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,168,168,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,168,168,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,168,168,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,168,168,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,169,169,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,185,185,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,185,185,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemeventlist.php,199,199,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemeventlist.php,199,199,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemformupdate.php,652,652,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemformupdate.php,654,654,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,52,52,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,52,52,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,52,52,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,52,52,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,54,54,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,54,54,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,55,55,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,55,55,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,56,56,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,56,56,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,56,56,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,56,56,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/iteminfo.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/iteminfo.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,160,160,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,160,160,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,167,167,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,167,167,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,171,171,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,171,171,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,175,175,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,175,175,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,180,180,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,180,180,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemoption.php,181,181,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemoption.php,181,181,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,27,27,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,27,27,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,49,49,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,49,49,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,54,54,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,54,54,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,65,65,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,65,65,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemqaform.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemqaform.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,86,86,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,86,86,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,116,116,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,116,116,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,123,123,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,123,123,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsellrank.php,163,163,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsellrank.php,163,163,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,66,66,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,66,66,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,70,70,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,70,70,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,92,92,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,92,92,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,108,108,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,108,108,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,111,111,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,111,111,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,112,112,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,112,112,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,127,127,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,127,127,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,129,129,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,129,129,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,170,170,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,170,170,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,171,171,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,171,171,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,174,174,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,174,174,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,175,175,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,175,175,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,176,176,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,176,176,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,179,179,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,179,179,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,183,183,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,183,183,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,197,197,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocklist.php,215,215,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocklist.php,215,215,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,77,77,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,77,77,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,78,78,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,78,78,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,98,98,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,98,98,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,139,139,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,139,139,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemstocksms.php,163,163,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemstocksms.php,163,163,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,136,136,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,136,136,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemsupply.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemsupply.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemtypelist.php,88,88,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemtypelist.php,88,88,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,43,43,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,43,43,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,44,44,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,44,44,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/itemuseform.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/itemuseform.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,87,87,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,87,87,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,105,105,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,105,105,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,106,106,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,106,106,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,107,107,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,107,107,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,108,108,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,108,108,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,180,180,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,180,180,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,181,181,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,181,181,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,182,182,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,182,182,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,183,183,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,185,185,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,185,185,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,187,187,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,187,187,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,188,188,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,188,188,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,189,189,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,189,189,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,192,192,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,192,192,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,196,196,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,196,196,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/optionstocklist.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/optionstocklist.php,228,228,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,123,123,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,123,123,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,136,136,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,136,136,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,138,138,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,138,138,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,222,222,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,222,222,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,223,223,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,223,223,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,223,223,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,223,223,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,223,223,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,223,223,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,226,226,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,226,226,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,227,227,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,227,227,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,232,232,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,232,232,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,234,234,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,234,234,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,235,235,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,235,235,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,237,237,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,237,237,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,239,239,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,239,239,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,240,240,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,240,240,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,242,242,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,242,242,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,243,243,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,243,243,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,244,244,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,244,244,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,245,245,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,245,245,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,247,247,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,247,247,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,248,248,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,248,248,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,287,287,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderform.php,287,287,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,336,336,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,354,354,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,355,355,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,356,356,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,357,357,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,358,358,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,359,359,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,360,360,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,361,361,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,373,373,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,374,374,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,375,375,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,376,376,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,377,377,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,379,379,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,380,380,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,381,381,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,382,382,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,383,383,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,402,402,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,406,406,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,407,407,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,411,411,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,417,417,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,417,417,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,426,426,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,429,429,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,430,430,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,436,436,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,436,436,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,447,447,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,455,455,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,466,466,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,474,474,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,482,482,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,485,485,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,490,490,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,492,492,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderform.php,493,493,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,163,163,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,163,163,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,165,165,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,165,165,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,167,167,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,167,167,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,171,171,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,171,171,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,172,172,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,172,172,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,174,174,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,174,174,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,175,175,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,175,175,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,176,176,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,176,176,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,177,177,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,177,177,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,178,178,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,178,178,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,179,179,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,179,179,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,180,180,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,180,180,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,184,184,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,184,184,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,192,192,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,192,192,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,194,194,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,194,194,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,196,196,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,196,196,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,198,198,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,198,198,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,200,200,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,200,200,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,204,204,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,204,204,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,206,206,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,206,206,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,212,212,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,212,212,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,214,214,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,214,214,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,216,216,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,216,216,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,218,218,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,218,218,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,220,220,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,220,220,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,222,222,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,222,222,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,224,224,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,224,224,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,226,226,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,226,226,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,232,232,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,232,232,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,234,234,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,234,234,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,236,236,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,236,236,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,238,238,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,238,238,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,240,240,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,240,240,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,243,243,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,243,243,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,250,250,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,250,250,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,251,251,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,251,251,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,264,264,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,264,264,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,275,275,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,275,275,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,366,366,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,366,366,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,367,367,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,367,367,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,371,371,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,375,375,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,375,375,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,376,376,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,376,376,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,377,377,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,378,378,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,378,378,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,379,379,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,379,379,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,380,380,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,380,380,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,381,381,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,381,381,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,382,382,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,382,382,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,384,384,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,390,390,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,395,395,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,395,395,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,396,396,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,396,396,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,400,400,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,400,400,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,401,401,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,401,401,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,404,404,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,404,404,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,405,405,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,405,405,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,409,409,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,409,409,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,411,411,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,411,411,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,417,417,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,417,417,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,420,420,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,420,420,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,425,425,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,425,425,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,427,427,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderlist.php,427,427,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,448,448,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,450,450,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,451,451,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,452,452,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,453,453,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,454,454,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,473,473,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderlist.php,499,499,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderpartcancel.php,32,32,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderpartcancel.php,32,32,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderpartcancel.php,35,35,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderpartcancel.php,35,35,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderpartcancel.php,39,39,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderpartcancel.php,39,39,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderpartcancel.php,47,47,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderpartcancel.php,47,47,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderpartcancel.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderpartcancel.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,126,126,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,126,126,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,127,127,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,127,127,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,129,129,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,129,129,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,131,131,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,131,131,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,292,292,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,292,292,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,294,294,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/orderprintresult.php,294,294,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,328,328,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,329,329,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,333,333,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,335,335,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,337,337,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,342,342,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,345,345,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,347,347,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,349,349,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,440,440,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,441,441,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,442,442,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,443,443,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,452,452,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,454,454,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,459,459,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,461,461,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,468,468,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,469,469,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/orderprintresult.php,482,485,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,121,121,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,121,121,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,155,155,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,155,155,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,156,156,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,156,156,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,157,157,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,157,157,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,159,159,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,159,159,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,160,160,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,160,160,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,169,169,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,169,169,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,217,217,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,217,217,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,219,219,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,219,219,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,230,230,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,230,230,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,236,236,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,236,236,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,237,237,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,237,237,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/personalpayform.php,258,258,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/personalpayform.php,258,258,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,152,152,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,152,152,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1date.php,153,153,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1date.php,153,153,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,152,152,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,152,152,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,153,153,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,153,153,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1month.php,154,154,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1month.php,154,154,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,45,45,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,45,45,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,90,90,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,90,90,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,90,90,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,90,90,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,92,92,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,92,92,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,98,98,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,98,98,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,125,125,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,125,125,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,126,126,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,126,126,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,127,127,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,127,127,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,129,129,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,129,129,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,130,130,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,130,130,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,131,131,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,131,131,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1today.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1today.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,138,138,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,138,138,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,139,139,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,139,139,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,142,142,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,142,142,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/sale1year.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/sale1year.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,57,57,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,57,57,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,61,61,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,61,61,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,83,83,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,83,83,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,115,115,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,115,115,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/shop_admin/wishlist.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/shop_admin/wishlist.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,114,114,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,114,114,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,114,114,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,114,114,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,116,116,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,116,116,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,139,139,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,139,139,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,164,164,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,164,164,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,165,165,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,165,165,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,166,166,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,166,166,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,167,167,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,167,167,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,168,168,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/ajax.sms_write_person.php,168,168,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/emoticon_move.php,30,30,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/emoticon_move.php,30,30,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,111,111,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,111,111,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,127,127,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,127,127,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,173,173,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,173,173,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,174,174,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,174,174,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,177,177,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,177,177,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,180,180,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,180,180,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,181,181,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,181,181,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,184,184,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,184,184,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,187,187,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,187,187,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,187,187,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,187,187,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,188,188,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,188,188,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,189,189,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,189,189,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,198,198,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,198,198,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_list.php,239,239,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_list.php,239,239,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,35,35,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,35,35,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,36,36,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,36,36,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,55,55,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,55,55,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,62,62,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,62,62,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,70,70,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,70,70,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/form_write.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/form_write.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_send.php,231,231,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_send.php,231,231,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_send.php,231,231,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_send.php,231,231,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,78,78,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,78,78,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,83,83,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,83,83,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,86,86,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,86,86,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,102,102,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,102,102,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,103,103,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,103,103,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,104,104,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,104,104,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,105,105,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,105,105,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,112,112,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,112,112,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,143,143,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,143,143,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,144,144,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,144,144,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,146,146,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,146,146,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,147,147,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,147,147,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,148,148,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,148,148,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,171,171,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,171,171,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,177,177,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,177,177,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,177,177,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,177,177,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,193,193,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,193,193,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,193,193,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,193,193,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,239,239,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,239,239,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,240,240,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,240,240,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,241,241,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,241,241,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,242,242,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,242,242,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,243,243,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,243,243,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,244,244,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,244,244,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,247,247,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,247,247,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,248,248,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,248,248,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,249,249,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,249,249,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,253,253,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,253,253,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,253,253,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,253,253,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,255,255,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,255,255,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,255,255,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,255,255,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/history_view.php,265,265,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/history_view.php,265,265,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,111,111,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,111,111,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,112,112,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,112,112,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,114,114,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,114,114,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,115,115,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,115,115,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,123,123,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,123,123,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,124,124,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,124,124,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,192,192,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,192,192,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,194,194,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,194,194,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,195,195,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,195,195,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,196,196,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,196,196,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,197,197,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,197,197,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,199,199,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,199,199,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,200,200,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,200,200,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,203,203,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,203,203,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,204,204,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,204,204,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,217,217,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,217,217,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book.php,266,266,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book.php,266,266,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_move.php,34,34,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_move.php,34,34,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,61,61,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,61,61,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,62,62,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,62,62,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,126,126,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,126,126,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,130,130,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,130,130,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,136,136,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,136,136,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/num_book_write.php,166,166,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/num_book_write.php,166,166,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,503,503,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,503,503,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,503,503,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,503,503,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,504,504,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,504,504,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,514,514,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,514,514,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,534,534,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,534,534,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,535,535,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,535,535,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,552,552,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,552,552,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write.php,566,566,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write.php,566,566,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write_form.php,17,17,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write_form.php,17,17,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write_form.php,18,18,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write_form.php,18,18,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write_form.php,20,20,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write_form.php,20,20,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/sms_admin/sms_write_form.php,29,29,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/sms_admin/sms_write_form.php,29,29,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,38,38,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,38,38,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,39,39,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,39,39,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,41,41,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,41,41,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,45,45,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,45,45,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,49,49,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,49,49,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_detail.php,57,57,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_detail.php,57,57,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/theme_preview.php,162,162,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/theme_preview.php,162,162,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_browser.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_browser.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_browser.php,87,87,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_browser.php,87,87,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_browser.php,90,90,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_browser.php,90,90,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_browser.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_browser.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,47,47,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,47,47,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,68,68,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,68,68,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_date.php,75,75,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_date.php,75,75,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_device.php,88,88,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_device.php,88,88,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_device.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_device.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_device.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_device.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_device.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_device.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_hour.php,48,48,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_hour.php,48,48,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_hour.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_hour.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_hour.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_hour.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_hour.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_hour.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,96,96,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,96,96,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,98,98,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,98,98,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_list.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_list.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,48,48,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,48,48,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,75,75,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,75,75,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_month.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_month.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_os.php,88,88,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_os.php,88,88,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_os.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_os.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_os.php,94,94,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_os.php,94,94,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_os.php,95,95,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_os.php,95,95,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_week.php,46,46,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_week.php,46,46,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_week.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_week.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_week.php,70,70,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_week.php,70,70,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_week.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_week.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,48,48,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,48,48,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,75,75,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,75,75,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/visit_year.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/visit_year.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/adm/write_count.php,195,195,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/adm/write_count.php,195,195,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/ajax.autosaveload.php,15,15,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/ajax.autosaveload.php,15,15,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/ajax.autosaveload.php,16,16,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/ajax.autosaveload.php,16,16,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/content.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/content.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/content.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/content.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/content.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/content.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/move.php,56,56,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/move.php,56,56,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/move.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/move.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/qadownload.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/register_email.php,30,30,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/register_email.php,30,30,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/register_email.php,37,37,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/register_email.php,37,37,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script,gnuboard-repo/bbs/register_form_update.php,588,588,"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/register_form_update.php,602,620,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/view_image.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/view_image.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/view_image.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/view_image.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/bbs/view_image.php,77,77,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/bbs/view_image.php,77,77,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,19,19,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,19,19,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,27,27,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,27,27,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,78,78,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,78,78,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/event.php,90,90,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/event.php,90,90,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,73,73,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,73,73,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,75,75,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,75,75,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/inicis/pay_return.php,76,76,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/inicis/pay_return.php,76,76,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/item.php,202,202,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/item.php,202,202,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/item.php,227,227,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/item.php,227,227,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/iteminfo.php,50,50,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/iteminfo.php,50,50,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/iteminfo.php,51,51,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/iteminfo.php,51,51,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/iteminfo.php,52,52,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/iteminfo.php,52,52,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/iteminfo.php,53,53,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/iteminfo.php,53,53,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/iteminfo.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/iteminfo.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/itemrecommend.php,22,22,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/itemrecommend.php,22,22,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/itemrecommend.php,26,26,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/itemrecommend.php,26,26,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,61,61,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,61,61,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,62,62,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/easypay_form.1.php,62,62,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,253,253,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,253,253,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,256,256,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,265,265,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,265,265,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,266,266,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,266,266,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,267,267,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,267,267,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,268,268,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,268,268,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,269,269,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,269,269,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,270,270,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,270,270,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,278,278,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,278,278,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,281,281,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,281,281,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,287,287,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,287,287,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,290,290,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,290,290,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,303,303,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,303,303,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,320,320,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,320,320,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,322,322,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,322,322,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,324,324,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,324,324,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,326,326,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,326,326,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,328,328,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,328,328,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,330,330,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,330,330,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,332,332,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,332,332,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,334,334,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,334,334,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,336,336,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,336,336,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,340,340,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,340,340,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,341,341,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,341,341,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,342,342,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,342,342,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,346,346,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,346,346,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,379,379,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,379,379,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,380,380,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,380,380,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,381,381,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,381,381,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,386,386,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,386,386,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,387,387,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,387,387,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,388,388,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,388,388,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,389,389,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/order_approval_form.php,389,389,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/orderform.1.php,55,55,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/orderform.1.php,55,55,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/orderform.1.php,56,56,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/orderform.1.php,56,56,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/kcp/orderform.1.php,57,57,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/kcp/orderform.1.php,57,57,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/lg/mispwapurl.php,7,7,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/lg/mispwapurl.php,7,7,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/lg/returnurl.php,57,57,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/lg/returnurl.php,57,57,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/lg/returnurl.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/lg/returnurl.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/listtype.php,74,74,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/listtype.php,74,74,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiry.php,89,89,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiry.php,89,89,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,31,31,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,31,31,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,107,107,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,107,107,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,107,107,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,107,107,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,109,109,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,109,109,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,113,113,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,113,113,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,115,115,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,115,115,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,116,116,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,116,116,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,118,118,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,118,118,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,122,122,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,122,122,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,205,205,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,205,205,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,274,274,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,274,274,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,440,440,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,440,440,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/orderinquiryview.php,446,446,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/orderinquiryview.php,446,446,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/shop/shop.head.php,45,45,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/shop/shop.head.php,45,45,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/mobile/skin/member/basic/password_reset.skin.php,16,16,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/mobile/skin/member/basic/password_reset.skin.php,16,16,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/PHPMailer/get_oauth_token.php,161,161,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/PHPMailer/get_oauth_token.php,161,161,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/inicert/ini_request.php,72,72,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/inicert/ini_request.php,72,72,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/inicert/ini_result.php,119,119,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/inicert/ini_result.php,119,119,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/inicert/ini_result.php,120,120,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/inicert/ini_result.php,120,120,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/kcpcert/find_kcpcert_result.php,207,207,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/kcpcert/find_kcpcert_result.php,207,207,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/kcpcert/kcpcert_result.php,207,207,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/kcpcert/kcpcert_result.php,207,207,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/kcpcert/kcpcert_result.php,233,233,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/kcpcert/kcpcert_result.php,233,233,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/lgxpay/returnurl.php,54,54,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/lgxpay/returnurl.php,54,54,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/social/includes/functions.php,542,542,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/social/includes/functions.php,542,542,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/plugin/social/includes/functions.php,624,624,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/plugin/social/includes/functions.php,624,624,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ajax.list.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ajax.list.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,31,31,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,31,31,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,32,32,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,32,32,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,33,33,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,33,33,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,48,48,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,48,48,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,69,69,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,69,69,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,98,98,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,98,98,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,98,98,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,98,98,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,99,99,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,99,99,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,103,103,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,103,103,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,108,108,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,108,108,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,108,108,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,108,108,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,110,110,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,110,110,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,134,134,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,134,134,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/cartoption.php,135,135,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/cartoption.php,135,135,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,29,29,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,29,29,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,33,33,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,33,33,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,41,41,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,41,41,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,44,44,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,44,44,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,91,91,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,91,91,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,100,100,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,100,100,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,106,106,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,106,106,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,111,111,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,111,111,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/event.php,115,115,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/event.php,115,115,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/inicis/libs/INIpayStdMakeSignature.php,14,14,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/inicis/libs/INIpayStdMakeSignature.php,14,14,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/item.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/item.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/item.php,139,139,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/item.php,139,139,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/item.php,279,279,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/item.php,279,279,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/itemoption.php,82,82,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/itemoption.php,82,82,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/itemrecommend.php,29,29,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/itemrecommend.php,29,29,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/itemrecommend.php,33,33,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/itemrecommend.php,33,33,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/itemstocksms.php,31,31,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/itemstocksms.php,31,31,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/itemstocksms.php,36,36,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/itemstocksms.php,36,36,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,343,343,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,343,343,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,348,348,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,348,348,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,349,349,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,349,349,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,350,350,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,350,350,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,351,351,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,351,351,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,352,352,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,352,352,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,353,353,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,353,353,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,355,355,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,355,355,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,356,356,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,356,356,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,357,357,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,357,357,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,358,358,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,358,358,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,359,359,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,359,359,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,360,360,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,360,360,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,361,361,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,361,361,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,363,363,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,363,363,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,364,364,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,364,364,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,365,365,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,365,365,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,366,366,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,366,366,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,367,367,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,367,367,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,368,368,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,368,368,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,372,372,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,372,372,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,373,373,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,373,373,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,374,374,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,374,374,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,375,375,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,375,375,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_hub.php,376,376,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_hub.php,376,376,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,101,101,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,101,101,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,129,129,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,129,129,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,133,133,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,133,133,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,137,137,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,137,137,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,141,141,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,141,141,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,145,145,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,145,145,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,153,153,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,153,153,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,172,172,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,172,172,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,176,176,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,176,176,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,187,187,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,187,187,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,191,191,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,191,191,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,219,219,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,219,219,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,223,223,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,223,223,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,227,227,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,227,227,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,231,231,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,231,231,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,235,235,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,235,235,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,239,239,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,239,239,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,243,243,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,243,243,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,248,248,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,248,248,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,259,259,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,259,259,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/kcp/pp_cli_result.php,263,263,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/kcp/pp_cli_result.php,263,263,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/lg/returnurl.php,43,43,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/lg/returnurl.php,43,43,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/lg/returnurl.php,49,49,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/lg/returnurl.php,49,49,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/lg/taxsave_result.php,246,246,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/lg/taxsave_result.php,246,246,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/lg/taxsave_result.php,246,246,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/lg/taxsave_result.php,246,246,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,67,67,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,67,67,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,71,71,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,71,71,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,85,85,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,85,85,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,140,140,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,140,140,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,149,149,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,149,149,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,154,154,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,154,154,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,157,157,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,157,157,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/list.php,169,169,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/list.php,169,169,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/listtype.php,84,84,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/listtype.php,84,84,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordercoupon.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordercoupon.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordercoupon.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordercoupon.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordercoupon.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordercoupon.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordercoupon.php,61,61,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordercoupon.php,61,61,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordercoupon.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordercoupon.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiry.php,93,93,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiry.php,93,93,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,150,150,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,150,150,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,151,151,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,151,151,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,155,155,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,155,155,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,156,156,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,156,156,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,157,157,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,157,157,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,159,159,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,159,159,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,161,161,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,161,161,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,266,266,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,266,266,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,270,270,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,270,270,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,274,274,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,274,274,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,278,278,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,278,278,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,286,286,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,286,286,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,297,297,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,297,297,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,308,308,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,308,308,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,312,312,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,312,312,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,338,338,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,338,338,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,357,357,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,357,357,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,367,367,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,367,367,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,381,381,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,381,381,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,392,392,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,392,392,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,433,433,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,433,433,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,439,439,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,439,439,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,460,460,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,460,460,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,464,464,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,464,464,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,468,468,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,468,468,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,472,472,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,472,472,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,476,476,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,476,476,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,492,492,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,492,492,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,496,496,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,496,496,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,500,500,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,500,500,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,504,504,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,504,504,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,513,513,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,513,513,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,521,521,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,521,521,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,542,542,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,542,542,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,542,542,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,542,542,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,546,546,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,546,546,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,550,550,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,550,550,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,573,573,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,573,573,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,578,578,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,578,578,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,585,585,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,585,585,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,592,592,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,592,592,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,599,599,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,599,599,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,606,606,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,606,606,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,612,612,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,612,612,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,618,618,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,618,618,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,622,622,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,622,622,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,632,632,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,632,632,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,638,638,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,638,638,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script,gnuboard-repo/shop/orderinquiryview.php,638,638,"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,644,644,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,644,644,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,647,647,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,647,647,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,648,648,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,648,648,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,666,666,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,666,666,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,703,703,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,703,703,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderinquiryview.php,711,711,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderinquiryview.php,711,711,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderitemcoupon.php,77,77,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderitemcoupon.php,77,77,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderitemcoupon.php,78,78,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderitemcoupon.php,78,78,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderitemcoupon.php,79,79,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderitemcoupon.php,79,79,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderitemcoupon.php,80,80,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderitemcoupon.php,80,80,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/orderitemcoupon.php,82,82,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/orderitemcoupon.php,82,82,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordersendcostcoupon.php,58,58,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordersendcostcoupon.php,58,58,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordersendcostcoupon.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordersendcostcoupon.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordersendcostcoupon.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordersendcostcoupon.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordersendcostcoupon.php,61,61,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordersendcostcoupon.php,61,61,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/ordersendcostcoupon.php,63,63,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/ordersendcostcoupon.php,63,63,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,36,36,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,36,36,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,92,92,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,92,92,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,97,97,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,97,97,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,102,102,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,102,102,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,106,106,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,106,106,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,117,117,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,117,117,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,128,128,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,128,128,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,132,132,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,132,132,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,158,158,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,158,158,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,177,177,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,177,177,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,234,234,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,234,234,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,240,240,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,240,240,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,260,260,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,260,260,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,266,266,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,266,266,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.tainted-user-input-in-php-script.tainted-user-input-in-php-script,gnuboard-repo/shop/personalpayresult.php,266,266,"Untrusted input could be used to tamper with a web page rendering, which can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,272,272,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,272,272,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,293,293,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,293,293,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/personalpayresult.php,301,301,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/personalpayresult.php,301,301,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/shop/shop.head.php,59,59,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/shop/shop.head.php,59,59,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/skin/member/basic/password_reset.skin.php,16,16,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/skin/member/basic/password_reset.skin.php,16,16,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/theme/basic/mobile/shop/shop.head.php,39,39,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/theme/basic/mobile/shop/shop.head.php,39,39,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/theme/basic/mobile/skin/member/basic/password_reset.skin.php,16,16,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/theme/basic/mobile/skin/member/basic/password_reset.skin.php,16,16,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/theme/basic/shop/shop.head.php,60,60,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/theme/basic/shop/shop.head.php,60,60,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
php.lang.security.injection.echoed-request.echoed-request,gnuboard-repo/theme/basic/skin/member/basic/password_reset.skin.php,16,16,`Echo`ing user input risks cross-site scripting vulnerability. You should use `htmlentities()` when showing data to users.
php.lang.security.taint-unsafe-echo-tag.taint-unsafe-echo-tag,gnuboard-repo/theme/basic/skin/member/basic/password_reset.skin.php,16,16,"Found direct access to a PHP variable wihout HTML escaping inside an inline PHP statement setting data from `$_REQUEST[...]`. When untrusted input can be used to tamper with a web page rendering, it can lead to a Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input executes malicious JavaScript code, leading to issues such as account compromise and sensitive information leakage. To prevent this vulnerability, validate the user input, perform contextual output encoding or sanitize the input. In PHP you can encode or sanitize user input with `htmlspecialchars` or use automatic context-aware escaping with a template engine such as Latte."
